From e37521b16b9da03080036facbc087e6e45876a5d Mon Sep 17 00:00:00 2001
From: Erik <erstfs@gmail.com>
Date: Thu, 26 Sep 2019 10:28:12 +0200
Subject: [PATCH] data loader for CMU dataset

---
 .gitignore                     |   3 +-
 CMakeLists.txt                 |   6 +-
 Examples/Monocular/CMU.yaml    |  56 +++++++++++
 Examples/Monocular/mono_CMU.cc | 166 +++++++++++++++++++++++++++++++++
 include/System.h               |   1 +
 5 files changed, 230 insertions(+), 2 deletions(-)
 create mode 100644 Examples/Monocular/CMU.yaml
 create mode 100644 Examples/Monocular/mono_CMU.cc

diff --git a/.gitignore b/.gitignore
index 611b5ad..7eae558 100644
--- a/.gitignore
+++ b/.gitignore
@@ -18,7 +18,8 @@ Thirdparty/g2o/build/
 Thirdparty/g2o/config.h
 Thirdparty/g2o/lib/
 Vocabulary/ORBvoc.txt
+debug_build/
 build/
 *~
 lib/
-
+.vscode/
diff --git a/CMakeLists.txt b/CMakeLists.txt
index 08a8af4..4144393 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -76,6 +76,7 @@ ${EIGEN3_LIBS}
 ${Pangolin_LIBRARIES}
 ${PROJECT_SOURCE_DIR}/Thirdparty/DBoW2/lib/libDBoW2.so
 ${PROJECT_SOURCE_DIR}/Thirdparty/g2o/lib/libg2o.so
+stdc++fs
 )
 
 # Build examples
@@ -107,7 +108,10 @@ add_executable(mono_kitti
 Examples/Monocular/mono_kitti.cc)
 target_link_libraries(mono_kitti ${PROJECT_NAME})
 
+add_executable(mono_CMU
+Examples/Monocular/mono_CMU.cc)
+target_link_libraries(mono_CMU ${PROJECT_NAME})
+
 add_executable(mono_euroc
 Examples/Monocular/mono_euroc.cc)
 target_link_libraries(mono_euroc ${PROJECT_NAME})
-
diff --git a/Examples/Monocular/CMU.yaml b/Examples/Monocular/CMU.yaml
new file mode 100644
index 0000000..fe76c0a
--- /dev/null
+++ b/Examples/Monocular/CMU.yaml
@@ -0,0 +1,56 @@
+%YAML:1.0
+
+#--------------------------------------------------------------------------------------------
+# Camera Parameters. Adjust them!
+#--------------------------------------------------------------------------------------------
+
+# Camera calibration and distortion parameters (OpenCV)
+Camera.fx: 868.993378
+Camera.fy: 866.063001
+Camera.cx: 525.942323
+Camera.cy: 420.042529
+
+Camera.k1: -0.399431
+Camera.k2: 0.188924
+Camera.p1: 0.000153
+Camera.p2: 0.000571
+
+# Camera frames per second
+Camera.fps: 15.0
+
+# Color order of the images (0: BGR, 1: RGB. It is ignored if images are grayscale)
+Camera.RGB: 1
+
+#--------------------------------------------------------------------------------------------
+# ORB Parameters
+#--------------------------------------------------------------------------------------------
+
+# ORB Extractor: Number of features per image
+ORBextractor.nFeatures: 2000
+
+# ORB Extractor: Scale factor between levels in the scale pyramid
+ORBextractor.scaleFactor: 1.2
+
+# ORB Extractor: Number of levels in the scale pyramid
+ORBextractor.nLevels: 8
+
+# ORB Extractor: Fast threshold
+# Image is divided in a grid. At each cell FAST are extracted imposing a minimum response.
+# Firstly we impose iniThFAST. If no corners are detected we impose a lower value minThFAST
+# You can lower these values if your images have low contrast
+ORBextractor.iniThFAST: 20
+ORBextractor.minThFAST: 7
+
+#--------------------------------------------------------------------------------------------
+# Viewer Parameters
+#--------------------------------------------------------------------------------------------
+Viewer.KeyFrameSize: 0.1
+Viewer.KeyFrameLineWidth: 1
+Viewer.GraphLineWidth: 1
+Viewer.PointSize:2
+Viewer.CameraSize: 0.15
+Viewer.CameraLineWidth: 2
+Viewer.ViewpointX: 0
+Viewer.ViewpointY: -10
+Viewer.ViewpointZ: -0.1
+Viewer.ViewpointF: 2000
diff --git a/Examples/Monocular/mono_CMU.cc b/Examples/Monocular/mono_CMU.cc
new file mode 100644
index 0000000..cc7b310
--- /dev/null
+++ b/Examples/Monocular/mono_CMU.cc
@@ -0,0 +1,166 @@
+/**
+* This file is part of ORB-SLAM2.
+*
+* Copyright (C) 2014-2016 Ra√∫l Mur-Artal <raulmur at unizar dot es> (University of Zaragoza)
+* For more information see <https://github.com/raulmur/ORB_SLAM2>
+*
+* ORB-SLAM2 is free software: you can redistribute it and/or modify
+* it under the terms of the GNU General Public License as published by
+* the Free Software Foundation, either version 3 of the License, or
+* (at your option) any later version.
+*
+* ORB-SLAM2 is distributed in the hope that it will be useful,
+* but WITHOUT ANY WARRANTY; without even the implied warranty of
+* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+* GNU General Public License for more details.
+*
+* You should have received a copy of the GNU General Public License
+* along with ORB-SLAM2. If not, see <http://www.gnu.org/licenses/>.
+*/
+
+
+#include<iostream>
+#include<algorithm>
+#include<fstream>
+#include<chrono>
+#include<iomanip>
+#include <experimental/filesystem>
+namespace fs = std::experimental::filesystem;
+
+#include<opencv2/core/core.hpp>
+
+#include"System.h"
+
+using namespace std;
+
+void LoadImages(const string &strSequence, vector<string> &vstrImageFilenames,
+                vector<double> &vTimestamps);
+
+int main(int argc, char **argv)
+{
+    if(argc != 4)
+    {
+        cerr << endl << "Usage: ./mono_kitti path_to_vocabulary path_to_settings path_to_sequence" << endl;
+        return 1;
+    }
+
+    // Retrieve paths to images
+    vector<string> vstrImageFilenames;
+    vector<double> vTimestamps;
+    LoadImages(string(argv[3]), vstrImageFilenames, vTimestamps);
+
+    int nImages = vstrImageFilenames.size();
+
+    // Create SLAM system. It initializes all system threads and gets ready to process frames.
+    ORB_SLAM2::System SLAM(argv[1],argv[2],ORB_SLAM2::System::MONOCULAR,true);
+
+    // Vector for tracking time statistics
+    vector<float> vTimesTrack;
+    vTimesTrack.resize(nImages);
+
+    cout << endl << "-------" << endl;
+    cout << "Start processing sequence ..." << endl;
+    cout << "Images in the sequence: " << nImages << endl << endl;
+
+    // Main loop
+    cv::Mat im;
+    for(int ni=0; ni<nImages; ni++)
+    {
+        // Read image from file
+        im = cv::imread(vstrImageFilenames[ni],CV_LOAD_IMAGE_UNCHANGED);
+        double tframe = vTimestamps[ni];
+
+        if(im.empty())
+        {
+            cerr << endl << "Failed to load image at: " << vstrImageFilenames[ni] << endl;
+            return 1;
+        }
+
+#ifdef COMPILEDWITHC11
+        std::chrono::steady_clock::time_point t1 = std::chrono::steady_clock::now();
+#else
+        std::chrono::monotonic_clock::time_point t1 = std::chrono::monotonic_clock::now();
+#endif
+
+        // Pass the image to the SLAM system
+        SLAM.TrackMonocular(im,tframe);
+
+#ifdef COMPILEDWITHC11
+        std::chrono::steady_clock::time_point t2 = std::chrono::steady_clock::now();
+#else
+        std::chrono::monotonic_clock::time_point t2 = std::chrono::monotonic_clock::now();
+#endif
+
+        double ttrack= std::chrono::duration_cast<std::chrono::duration<double> >(t2 - t1).count();
+
+        vTimesTrack[ni]=ttrack;
+
+        // Wait to load the next frame
+        double T=0;
+        if(ni<nImages-1)
+            T = vTimestamps[ni+1]-tframe;
+        else if(ni>0)
+            T = tframe-vTimestamps[ni-1];
+
+        if(ttrack<T)
+            usleep((T-ttrack)*1e6);
+    }
+
+    // Stop all threads
+    SLAM.Shutdown();
+
+    // Tracking time statistics
+    sort(vTimesTrack.begin(),vTimesTrack.end());
+    float totaltime = 0;
+    for(int ni=0; ni<nImages; ni++)
+    {
+        totaltime+=vTimesTrack[ni];
+    }
+    cout << "-------" << endl << endl;
+    cout << "median tracking time: " << vTimesTrack[nImages/2] << endl;
+    cout << "mean tracking time: " << totaltime/nImages << endl;
+
+    // Save camera trajectory
+    SLAM.SaveKeyFrameTrajectoryTUM("KeyFrameTrajectory.txt");
+
+    return 0;
+}
+
+void LoadImages(const string &strPathToSequence, vector<string> &vstrImageFilenames, vector<double> &vTimestamps)
+{
+    std::cout << "This is a test" << std::endl << std::flush;
+
+    std::vector<fs::path> allFiles;
+    if (fs::exists(strPathToSequence) && fs::is_directory(strPathToSequence)) {
+        for (const auto& entry : fs::directory_iterator(strPathToSequence)) {
+            if (fs::is_regular_file(entry.status()) && entry.path().filename().string().find("_c0_") < string::npos) {
+                allFiles.emplace_back(entry.path());
+            }
+        }
+    }
+
+    sort(allFiles.begin(), allFiles.end());
+    const int nFiles = allFiles.size();
+    const int nOffset = 9500;
+
+    vTimestamps.resize(nFiles-nOffset);
+    vstrImageFilenames.resize(nFiles-nOffset);
+
+    stringstream ss0;
+    std::string s0 = allFiles[nOffset].filename().string();
+    ss0 << s0.substr(13, 16);
+    double t0;
+    ss0 >> t0;
+    t0 /= 1e6;
+    for(int i=0; i<nFiles-nOffset; i++)
+    {
+        std::string s = allFiles[i+nOffset].filename().string();
+        stringstream ss;
+        ss << s.substr(13, 16);
+        double t;
+        ss >> t;
+        t /= 1e6;
+        vTimestamps[i] = t - t0;
+        vstrImageFilenames[i] = allFiles[i+nOffset].string();
+    }
+}
diff --git a/include/System.h b/include/System.h
index b377b45..e05aa8e 100644
--- a/include/System.h
+++ b/include/System.h
@@ -25,6 +25,7 @@
 #include<string>
 #include<thread>
 #include<opencv2/core/core.hpp>
+#include <unistd.h>
 
 #include "Tracking.h"
 #include "FrameDrawer.h"
-- 
2.17.1

